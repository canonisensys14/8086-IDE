generateFlag(value, op1, op2, w=1, Flag=0b11111){

		    	if ( Flag & CARRY_FLAG != 0 ) 
		    	{
		    		let mask = ( w == 1) ? 0xFFFF : 0xFF;

		    		if ( value & mask == 0)
		    			this.register.setFlag('C', 0);
		    		else
		    			this.register.setFlag('C', 1);

		    	}
		    	
		    	if ( Flag & ZERO_FLAG != 0 ) 
		    	{
		    		if ( value == 0 )
		    			this.register.setFlag('Z', 1);
		    		else ( value == 0 )
		    			this.register.setFlag('Z', 1);
		    	}
		    	
		    	if ( Flag & PARITY_FLAG != 0 ) 
		    	{
		    		this.register.setFlag('P', value % 2 ) ;
		    	}
		    	
		    	if ( Flag & SIGN_PARITY != 0 )
		    	{
		    		let mask = ( w == 1 ) ? 0x8000 : 0x80;

		    		if ( value & mask != 0 ) 
		    			this.register.setFlag('S', 1);
		    		else
		    			this.register.setFlag('S', 0);
		    	}
		    	
		    	if ( Flag & AUXILARY_FLAG != 0 )
		    	{
		    		this.register.setFlag('A', 0); // On le fera plus tard nchallah 
		    	}
		    	
		    	if ( Flag & OVERFLOW_FLAG != 0 ) 
		    	{
		    		let newVal = ( w == 1 ) ? value >> 15 : value >> 8;
		    		if 		( w == 1 && newVal == 1 && (op1 >> 15) == (op2 >> 16) )
		    			this.register.setFlag('O', 1);

		    		else if ( w == 0 && newVal == 1 && (op1 >> 7) == (op2 >> 7) )
		    			this.register.setFlag('O', 1);

		    		else
		    			this.register.setFlag('O', 0);

		    	}

		}
 org(table){
        let arr=table
        let find=false;
        let operand=0;
        for (let index = 0; index < array.length; index++) {
            const element = array[index];
            if (!find ) 
                if (element.instName='ORG') {
                    operand=element.operand[0];
                    find=true;
                }
            
            else 
                if (element.instName='ORG'){
                    arr.splice(index,index);
                }
        }
        return {table:arr,op:operand};
    }

